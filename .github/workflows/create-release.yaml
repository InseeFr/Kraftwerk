name: Create tag and release

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ "main" ]
  workflow_call:
    
jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.version-step.outputs.newTag }}
      should_run_next_job:  ${{ steps.check-tag.outputs.should_continue }}
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get source version
        id: version-step
        run: |
          git fetch origin main
          git checkout origin/main
          echo "newTag=v$(mvn -f pom-public.xml help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Print source version
        run: echo ${{ steps.version-step.outputs.newTag }}

      - uses: mukunku/tag-exists-action@v1.6.0
        name: Check tag existence
        id: check-tag-exists
        with:
          tag: ${{ steps.version-step.outputs.newTag }}

      - name: Tag verification
        id: check-tag
        run: |
          if [[ "${{ steps.check-tag-exists.outputs.exists }}" == "true" ]]; then
            echo "Nothing to tag/release, the tag ${{ steps.version-step.outputs.newTag }} already exists"
            echo "should_continue=false" >> $GITHUB_OUTPUT
          elif ! [[ "${{ steps.version-step.outputs.newTag }}" =~ ^v[0-9]+.[0-9]+.[0-9]+$ ]]; then
            echo "Nothing to tag/release, the tag ${{ steps.version-step.outputs.newTag }} is not in correct format X.Y.Z"
            echo "should_continue=false" >> $GITHUB_OUTPUT
          else
            echo "should_continue=true" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: [ check-version ]
    if: needs.check-version.outputs.should_run_next_job == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Get previous final release tag
        id: previousTag
        run: echo "previousTag=$(git --no-pager tag --sort=creatordate --merged ${{ github.ref_name }} | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+$" | tail -1)" >> $GITHUB_OUTPUT

      - name: Extract changelog content
        id: changeLogContent
        run: |
          FILE_PATH='CHANGELOG.md'
          VERSION="${{ needs.check-version.outputs.release-tag }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Look for release title in changelog
          TITLE1="$(grep -m1 "^## ${VERSION_NO_V}" "$FILE_PATH" | sed 's/^## //')"
          
          # Generates it not found
          if [ -z "$TITLE1" ]; then
            DATE="$(date +'%Y-%m-%d')"
            TITLE1="${VERSION_NO_V} [${DATE}]"
            changes="No changes found in CHANGELOG.md for this version."
          else
            # Gets next title (previous version changes) to extract 
            TITLE2=$(grep "^## " "$FILE_PATH" | sed '1d' | head -n1 | sed 's/^## //')
            
            #Extract what's between lines
            escape_for_sed() {
              echo "$1" | sed -e 's/[][\/.^$*]/\\&/g'
            }
            
            ESC_TITLE1=$(escape_for_sed "$TITLE1")
            ESC_TITLE2=$(escape_for_sed "$TITLE2")
            
            if [ -z "$TITLE2" ]; then
            changes=$(sed -n "/^## $ESC_TITLE1$/,\$p" "$FILE_PATH" | sed '1d')
            else
            changes=$(sed -n "/^## $ESC_TITLE1$/,/^## $ESC_TITLE2$/p" "$FILE_PATH" | sed '1d;$d')
            fi
          fi
          
          {
              echo "TITLE1=${TITLE1}"
              echo "changes<<EOF"
              echo "$changes"
              echo "EOF"
          } >> $GITHUB_OUTPUT

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.release-tag }}
          target_commitish: ${{ github.head_ref || github.ref }}
          name: ${{steps.changeLogContent.outputs.TITLE1 }} 
          body: ${{steps.changeLogContent.outputs.changes}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
